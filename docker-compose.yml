version: '3.1'

services:

  db:
    image: mysql
    # (not for production configuration)
    command: --default-authentication-plugin=mysql_native_password
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: root
    ports:
      - 3306:3306
    volumes:
      - mysql-data:/var/lib/mysql
    networks:
      - backend

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080
    depends_on:
      - db
    links:
      - db

  mongo:
    image: mongo
    restart: always
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    volumes:
      - 'mongo-data:/data/db'
    networks:
      - backend

  mongo-express:
    image: mongo-express
    restart: always
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: example
      ME_CONFIG_MONGODB_URL: mongodb://root:example@mongo:27017/

  rabbitmq:
    image: rabbitmq:3.12-management
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - backend

  app-admin:
    build:
      context: ./admin
    links:
      - "db:db"
      - "rabbitmq:rabbitmq"
    depends_on:
      - db
      - rabbitmq
    restart: always
    ports:
      - 8000:8000
    environment:
      NODE_ENV: production
      MYSQL_HOST: "db"
      MYSQL_PORT: 3306
      MYSQL_USER: "root"
      MYSQL_PASSWORD: "root"
      MYSQL_DATABASE: "nest_admin"
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: 5672
    expose:
      - 8000
    networks:
      - backend
      - frontend

  app-main:
    build:
      context: ./main
      dockerfile: Dockerfile.main
    links:
      - "mongo:mongo"
      - "app-admin:app-admin"
    depends_on:
      - mongo
      - app-main-listener
      - app-admin
    restart: always
    ports:
      - 8001:8001
    environment:
      NODE_ENV: production
      MONGO_HOST: "mongo"
      MONGO_PORT: 27017
      ADMIN_HOST: "app-admin"
      ADMIN_PORT: 8000
    expose:
      - 8001
    networks:
      - backend
      - frontend
  
  app-main-listener:
    build:
      context: ./main
      dockerfile: Dockerfile.listener
    links:
      - "mongo:mongo"
      - "rabbitmq:rabbitmq"
      - "app-admin:app-admin"
    depends_on:
      - mongo
      - rabbitmq
      - app-admin
    restart: always
    environment:
      NODE_ENV: production
      MONGO_HOST: "mongo"
      MONGO_PORT: 27017
      RABBITMQ_HOST: "rabbitmq"
      RABBITMQ_PORT: 5672
    networks:
      - backend

volumes:
  mysql-data:
  mongo-data:

networks:
  frontend:
  backend: